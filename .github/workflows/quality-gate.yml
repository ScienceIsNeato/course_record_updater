name: Quality Gate

on:
  push:
    branches: [ main, develop, 'feature/*' ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Generate cache key
      id: cache-key
      run: echo "key=${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}" >> $GITHUB_OUTPUT

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

  black-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Black Formatting Check
      run: python scripts/ship_it.py --checks black
      env:
        PYTHONPATH: .

  isort-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Import Sorting Check
      run: python scripts/ship_it.py --checks isort
      env:
        PYTHONPATH: .

  lint-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Linting
      run: python scripts/ship_it.py --checks lint
      env:
        PYTHONPATH: .

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Unit Tests
      run: python scripts/ship_it.py --checks tests
      env:
        PYTHONPATH: .

  coverage-check:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Coverage Analysis
      run: python scripts/ship_it.py --checks coverage
      env:
        PYTHONPATH: .
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  smoke-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Chrome for Selenium
      run: |
        # Use pre-installed Chrome in GitHub Actions
        google-chrome --version || {
          sudo apt-get update -qq
          sudo apt-get install -y google-chrome-stable
        }
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Start Firestore Emulator (with proper startup visibility)
      run: |
        echo "Installing gcloud beta components..."
        # First, prepare the container and install components
        docker run --name firestore-emulator-prep \
          gcr.io/google.com/cloudsdktool/cloud-sdk:alpine \
          sh -c "gcloud components install beta --quiet"
        
        # Commit the prepared container
        docker commit firestore-emulator-prep firestore-ready
        docker rm firestore-emulator-prep
        
        echo "Starting Firestore emulator with full output visibility..."
        # Start emulator in foreground to see startup process
        docker run --name firestore-emulator -p 8086:8086 firestore-ready \
          gcloud beta emulators firestore start --host-port=0.0.0.0:8086 --project=test-project &
        
        DOCKER_PID=$!
        echo "Emulator starting with Docker PID: $DOCKER_PID"
        
        # Monitor the startup process with real-time logs
        echo "Monitoring emulator startup logs..."
        timeout 60s docker logs -f firestore-emulator &
        LOGS_PID=$!
        
        # Give it time to start and show any errors
        sleep 10
        
        # Check if container is still running
        if ! docker ps | grep -q firestore-emulator; then
          echo "❌ ERROR: Firestore emulator container stopped unexpectedly"
          echo "Container status:"
          docker ps -a | grep firestore-emulator
          echo "Full logs:"
          docker logs firestore-emulator
          exit 1
        fi
        
        # Test connectivity
        echo "Testing Firestore connectivity..."
        if python -c "import os; os.environ['FIRESTORE_EMULATOR_HOST']='localhost:8086'; from google.cloud import firestore; firestore.Client(project='test').collection('test').document('test').set({'ready': True}); print('✅ Firestore emulator is ready and functional')"; then
          echo "Emulator startup successful!"
          kill $LOGS_PID 2>/dev/null || true
        else
          echo "❌ ERROR: Firestore emulator not responding to connections"
          echo "Container logs:"
          docker logs firestore-emulator
          echo "Network status:"
          netstat -tlnp | grep 8086 || echo "Port 8086 not listening"
          exit 1
        fi
    - name: Run Smoke Tests (using unified script)
      run: |
        # Set CI environment variables for the script
        export FIRESTORE_EMULATOR_HOST=localhost:8086
        export FIRESTORE_CLIENT_TIMEOUT=30
        export SELENIUM_IMPLICIT_WAIT=3
        export SELENIUM_PAGE_LOAD_TIMEOUT=8
        export PYTHONPATH=.
        
        # Run the same script used locally
        ./run_smoke_tests.sh
      env:
        CI: true
        GITHUB_ACTIONS: true

  security-check:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Security Audit
      run: |
        python scripts/ship_it.py --checks security | tee security-output.log
        exit ${PIPESTATUS[0]}
      env:
        PYTHONPATH: .
        SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
    
    - name: Upload Security Audit Output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-output
        path: |
          security-output.log
          safety_detailed_output.txt
          safety_full_diagnostic.txt
    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.txt

  type-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Type Checking
      run: python scripts/ship_it.py --checks types
      env:
        PYTHONPATH: .

  sonar-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run SonarQube Analysis
      run: python scripts/ship_it.py --checks sonar
      env:
        PYTHONPATH: .
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  imports-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Import Analysis
      run: python scripts/ship_it.py --checks imports
      env:
        PYTHONPATH: .

  duplication-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Code Duplication Check
      run: python scripts/ship_it.py --checks duplication
      env:
        PYTHONPATH: .