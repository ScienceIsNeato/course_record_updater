name: Quality Gate

on:
  push:
    branches: [ main, develop, 'feature/*' ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Generate cache key
      id: cache-key
      run: echo "key=${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}" >> $GITHUB_OUTPUT

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

  black-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Black Formatting Check
      run: python scripts/ship_it.py --checks black
      env:
        PYTHONPATH: .

  isort-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Import Sorting Check
      run: python scripts/ship_it.py --checks isort
      env:
        PYTHONPATH: .

  lint-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Linting
      run: python scripts/ship_it.py --checks lint
      env:
        PYTHONPATH: .

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Unit Tests
      run: python scripts/ship_it.py --checks tests
      env:
        PYTHONPATH: .

  coverage-check:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Coverage Analysis
      run: python scripts/ship_it.py --checks coverage
      env:
        PYTHONPATH: .
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  smoke-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Chrome for Selenium
      run: |
        # Use pre-installed Chrome in GitHub Actions
        google-chrome --version || {
          sudo apt-get update -qq
          sudo apt-get install -y google-chrome-stable
        }
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Start Firestore Emulator (using Docker)
      run: |
        # Use Docker for faster Firestore emulator startup
        echo "Starting Firestore emulator container..."
        docker run -d --name firestore-emulator \
          -p 8086:8086 \
          gcr.io/google.com/cloudsdktool/cloud-sdk:alpine \
          sh -c "gcloud components install beta --quiet && gcloud beta emulators firestore start --host-port=0.0.0.0:8086 --project=test-project"
        
        echo "Waiting for Firestore emulator to be ready..."
        # Create a simple Python health check script
        cat > firestore_health_check.py << 'EOF'
import os
import sys
import time
from google.cloud import firestore

def check_firestore_health():
    try:
        # Initialize client with emulator
        os.environ['FIRESTORE_EMULATOR_HOST'] = 'localhost:8086'
        db = firestore.Client(project='test-project')
        
        # Try a simple operation
        test_doc = db.collection('health_check').document('test')
        test_doc.set({'status': 'ready', 'timestamp': time.time()})
        
        # Read it back
        doc = test_doc.get()
        if doc.exists:
            print("✅ Firestore emulator is ready and functional")
            return True
        return False
    except Exception as e:
        print(f"❌ Firestore emulator not ready: {e}")
        return False

# Wait up to 60 seconds with exponential backoff
max_attempts = 20
for attempt in range(max_attempts):
    if check_firestore_health():
        sys.exit(0)
    
    wait_time = min(2 ** (attempt // 3), 5)  # Exponential backoff, max 5s
    print(f"Waiting {wait_time}s before retry ({attempt + 1}/{max_attempts})...")
    time.sleep(wait_time)

print("ERROR: Firestore emulator failed to become ready after 60 seconds")
sys.exit(1)
EOF

        # Run the health check
        python firestore_health_check.py || {
          echo "Firestore emulator health check failed. Diagnostics:"
          echo "Docker container status:"
          docker ps -a | grep firestore-emulator
          echo "Docker logs:"
          docker logs firestore-emulator
          echo "Network status:"
          netstat -tlnp | grep 8086 || echo "Port 8086 not listening"
          exit 1
        }
    - name: Start Flask Application
      run: |
        # Start Flask app in background with timeout
        timeout 60s python app.py &
        # Quick health check with shorter wait
        timeout 30s bash -c 'until curl -f http://localhost:3001/api/health; do sleep 1; done' || {
          echo "Flask app startup timeout - continuing anyway"
          ps aux | grep python || echo "No Python processes found"
        }
      env:
        PYTHONPATH: .
        COURSE_RECORD_UPDATER_PORT: 3001
        FIRESTORE_EMULATOR_HOST: localhost:8086
        FLASK_DEBUG: false
        FIRESTORE_CLIENT_TIMEOUT: 30
    - name: Run Smoke Tests with Timestamps
      run: |
        # Add timestamped logging to identify hanging tests
        python -c "
        import time
        import subprocess
        import sys
        import signal
        import os
        
        def timeout_handler(signum, frame):
            print(f'{time.strftime(\"%Y-%m-%d %H:%M:%S\")} - TIMEOUT: Tests taking too long, investigating...')
            # List processes
            subprocess.run(['ps', 'aux'], check=False)
            raise TimeoutError('Test execution timeout')
        
        # Set 10-minute timeout
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(600)
        
        print(f'{time.strftime(\"%Y-%m-%d %H:%M:%S\")} - Starting smoke tests with CI optimizations...')
        
        # Verify Firestore emulator is accessible before running tests
        print(f'{time.strftime(\"%Y-%m-%d %H:%M:%S\")} - Verifying Firestore emulator accessibility...')
        import requests
        try:
            response = requests.get('http://localhost:8086', timeout=5)
            print(f'{time.strftime(\"%Y-%m-%d %H:%M:%S\")} - Firestore emulator accessible (status: {response.status_code})')
        except Exception as e:
            print(f'{time.strftime(\"%Y-%m-%d %H:%M:%S\")} - ERROR: Firestore emulator not accessible: {e}')
            subprocess.run(['docker', 'ps', '-a'], check=False)
            subprocess.run(['docker', 'logs', 'firestore-emulator'], check=False)
            sys.exit(1)
        
        cmd = ['python', '-m', 'pytest', 'tests/integration/', '-v', '-s', '--tb=short', '--disable-warnings', '--maxfail=3', '-x']
        
        print(f'{time.strftime(\"%Y-%m-%d %H:%M:%S\")} - Running: {\" \".join(cmd)}')
        
        # Use subprocess.run without capturing output for live display
        process = subprocess.run(cmd, check=False)
        
        signal.alarm(0)  # Cancel timeout
        print(f'{time.strftime(\"%Y-%m-%d %H:%M:%S\")} - Tests completed with exit code: {process.returncode}')
        sys.exit(process.returncode)
        "
      env:
        PYTHONPATH: .
        FIRESTORE_EMULATOR_HOST: localhost:8086
        FIRESTORE_CLIENT_TIMEOUT: 30
        # Optimize Selenium for CI
        SELENIUM_IMPLICIT_WAIT: 3
        SELENIUM_PAGE_LOAD_TIMEOUT: 8

  security-check:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Security Audit
      run: |
        python scripts/ship_it.py --checks security | tee security-output.log
        exit ${PIPESTATUS[0]}
      env:
        PYTHONPATH: .
        SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
    
    - name: Upload Security Audit Output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-output
        path: |
          security-output.log
          safety_detailed_output.txt
          safety_full_diagnostic.txt
    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.txt

  type-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Type Checking
      run: python scripts/ship_it.py --checks types
      env:
        PYTHONPATH: .

  sonar-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run SonarQube Analysis
      run: python scripts/ship_it.py --checks sonar
      env:
        PYTHONPATH: .
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  imports-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Import Analysis
      run: python scripts/ship_it.py --checks imports
      env:
        PYTHONPATH: .

  duplication-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run Code Duplication Check
      run: python scripts/ship_it.py --checks duplication
      env:
        PYTHONPATH: .